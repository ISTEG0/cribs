(создав файл .gitignore можно добавлять названия файлов в него, которые не нужны для отслеживания
в git)
git init - инициализирует файлы
git status - проверить состояние файлов
git add . - добавляет все файлы под контроль
git add <name file> - добавляет выбранный файл под контроль
git commit -m "name comment" - создание коммита с указанием кратеого комментария
git commit - коммит с открытием редактора для подробного описания коммита.
git add -p <name file> - позволяет в рамках одного файла опеределить какой фрагмент изменений
добавить под контрроль, а какой нет. (буквально по строчно)
git commit -am "name comment" - позволяет одной командой проиндексировать файл и создать коммит
(примечание: дання команда работает только для тех файлов, которые уже были индексированы до этого)
git commit -m "name comment" (путь к файлу) - сделает коммит к указанному файлу, также если он уже был
проиндексирован. (например: git commit -m "name comment" .gitignore)
git rm (путь к файлу) - удаление с дерриктории и index, или с указанием дерриктории (строчка ниже)
git rm -r src (src - в качестве примера) - эта каманда одновременно удаляет файл и добавляет в index.
git rm - это как в два шага: 1) удалить файл 2) git add .
git rm -r --cached src - удалить из индекса, но оставит в рабочем каталоге.(тоесть git перестал отслеживать), чтобы
обратно попало в index: git add src.
git rm --cached main.js - тоже самое что и команда выше, убирает из под слежения гита.
git rm -f <name file> - удалить файл из индекса и дерриктории, игнорируя предупреждения, о том, что файл не был 
сохранен в репозиторий.
git mv index.html hello.html - одномременно переименует файл с первого на второй и добавит изменения в index.
Если переименовывать файлы в ручную, git посчитает это как удаление старого и добавление нового файла,
после переименовывания нужно сделать git add и тогда git поймет, что было переименовывание.
git branch - показывает список веток
git branch -m (name) - переименовать имя ветки, в реали без скобок писать. 
git branch -v - показывает текущую ветку и коммит на который она указывает.
git branch <name new branch> - создаст новую ветку.
git checkout <name branch> - переключение на указанную ветку.
git checkout -b <name new branch> - одновременно создаст ветку и сразу на нее переключится.
git checkout -f master - переклчится с текущей ветки на ветку мастер, не оставляя созданных тзменений в
текущей ветки, если не были сделаны коммиты.
git checkout -f - удалит все изменения в текущей ветке, которые не были закомичены (можно исмпользовать для 
эксперементов).
git stash - собирает не закомиченные изменения, удаляет их из файла, и убирает в специальный архив.
Все изменения при git stash не привязвнны ни к какой ветке.
git stash pop - вернет удаленные и архивированне изменения обратно, желательно git stash и git stash pop
делать в том же самом файле, чтобы не было конфликтов.
git checkout 54a4 index.html- (если мы решили в текущей ветке текущего файла внести изменения старого коммита, то указыв-
ваем данной командой точный коммит и файл, который хотим изменить в текущей ветке текущего файла).
git checkout HEAD index.html -если уже закомители - вернет изменения данного файла к исходному.
git checkout index.html - ворачиваеет файл из index с текущеми изменениями.
git clone git@bitbucket.org:designclub/dubroshcha.git -b имя ветки - клонирование репозитория с указанием конкретной ветки.
git log - список коммитов.
git checkout 035a128d2e66eb9fe3032036b3415e60c728f692 - переключились на коммит.
git reset --hard HEAD - отмены всех локальных изменений и возврата рабочего дерева в состояние последнего коммита.
git stash - поместят текущие изменения в "корзину" stash
git stash pop - восстановят изменения из  "корзины" stash.

Пример:
	1) git stash
	2) git checkout <название_ветки>
	3) git stash pop

Эти команды (из прмиера выше) поместят текущие изменения в "корзину" stash, переключат вас на другую ветку, а затем восстановят изменения из stash.

